// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	time "time"
)

type PhoneNumbersListRequest struct {
	// This is the maximum number of items to return. Defaults to 100.
	Limit *float64 `json:"-" url:"limit,omitempty"`
	// This will return items where the createdAt is greater than the specified value.
	CreatedAtGt *time.Time `json:"-" url:"createdAtGt,omitempty"`
	// This will return items where the createdAt is less than the specified value.
	CreatedAtLt *time.Time `json:"-" url:"createdAtLt,omitempty"`
	// This will return items where the createdAt is greater than or equal to the specified value.
	CreatedAtGe *time.Time `json:"-" url:"createdAtGe,omitempty"`
	// This will return items where the createdAt is less than or equal to the specified value.
	CreatedAtLe *time.Time `json:"-" url:"createdAtLe,omitempty"`
	// This will return items where the updatedAt is greater than the specified value.
	UpdatedAtGt *time.Time `json:"-" url:"updatedAtGt,omitempty"`
	// This will return items where the updatedAt is less than the specified value.
	UpdatedAtLt *time.Time `json:"-" url:"updatedAtLt,omitempty"`
	// This will return items where the updatedAt is greater than or equal to the specified value.
	UpdatedAtGe *time.Time `json:"-" url:"updatedAtGe,omitempty"`
	// This will return items where the updatedAt is less than or equal to the specified value.
	UpdatedAtLe *time.Time `json:"-" url:"updatedAtLe,omitempty"`
}

type PhoneNumbersCreateRequest struct {
	CreateByoPhoneNumberDto    *CreateByoPhoneNumberDto
	CreateTwilioPhoneNumberDto *CreateTwilioPhoneNumberDto
	CreateVonagePhoneNumberDto *CreateVonagePhoneNumberDto
	CreateVapiPhoneNumberDto   *CreateVapiPhoneNumberDto
}

func (p *PhoneNumbersCreateRequest) UnmarshalJSON(data []byte) error {
	valueCreateByoPhoneNumberDto := new(CreateByoPhoneNumberDto)
	if err := json.Unmarshal(data, &valueCreateByoPhoneNumberDto); err == nil {
		p.CreateByoPhoneNumberDto = valueCreateByoPhoneNumberDto
		return nil
	}
	valueCreateTwilioPhoneNumberDto := new(CreateTwilioPhoneNumberDto)
	if err := json.Unmarshal(data, &valueCreateTwilioPhoneNumberDto); err == nil {
		p.CreateTwilioPhoneNumberDto = valueCreateTwilioPhoneNumberDto
		return nil
	}
	valueCreateVonagePhoneNumberDto := new(CreateVonagePhoneNumberDto)
	if err := json.Unmarshal(data, &valueCreateVonagePhoneNumberDto); err == nil {
		p.CreateVonagePhoneNumberDto = valueCreateVonagePhoneNumberDto
		return nil
	}
	valueCreateVapiPhoneNumberDto := new(CreateVapiPhoneNumberDto)
	if err := json.Unmarshal(data, &valueCreateVapiPhoneNumberDto); err == nil {
		p.CreateVapiPhoneNumberDto = valueCreateVapiPhoneNumberDto
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, p)
}

func (p PhoneNumbersCreateRequest) MarshalJSON() ([]byte, error) {
	if p.CreateByoPhoneNumberDto != nil {
		return json.Marshal(p.CreateByoPhoneNumberDto)
	}
	if p.CreateTwilioPhoneNumberDto != nil {
		return json.Marshal(p.CreateTwilioPhoneNumberDto)
	}
	if p.CreateVonagePhoneNumberDto != nil {
		return json.Marshal(p.CreateVonagePhoneNumberDto)
	}
	if p.CreateVapiPhoneNumberDto != nil {
		return json.Marshal(p.CreateVapiPhoneNumberDto)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", p)
}

type PhoneNumbersCreateRequestVisitor interface {
	VisitCreateByoPhoneNumberDto(*CreateByoPhoneNumberDto) error
	VisitCreateTwilioPhoneNumberDto(*CreateTwilioPhoneNumberDto) error
	VisitCreateVonagePhoneNumberDto(*CreateVonagePhoneNumberDto) error
	VisitCreateVapiPhoneNumberDto(*CreateVapiPhoneNumberDto) error
}

func (p *PhoneNumbersCreateRequest) Accept(visitor PhoneNumbersCreateRequestVisitor) error {
	if p.CreateByoPhoneNumberDto != nil {
		return visitor.VisitCreateByoPhoneNumberDto(p.CreateByoPhoneNumberDto)
	}
	if p.CreateTwilioPhoneNumberDto != nil {
		return visitor.VisitCreateTwilioPhoneNumberDto(p.CreateTwilioPhoneNumberDto)
	}
	if p.CreateVonagePhoneNumberDto != nil {
		return visitor.VisitCreateVonagePhoneNumberDto(p.CreateVonagePhoneNumberDto)
	}
	if p.CreateVapiPhoneNumberDto != nil {
		return visitor.VisitCreateVapiPhoneNumberDto(p.CreateVapiPhoneNumberDto)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", p)
}

type PhoneNumbersCreateResponse struct {
	ByoPhoneNumber    *ByoPhoneNumber
	TwilioPhoneNumber *TwilioPhoneNumber
	VonagePhoneNumber *VonagePhoneNumber
	VapiPhoneNumber   *VapiPhoneNumber
}

func (p *PhoneNumbersCreateResponse) UnmarshalJSON(data []byte) error {
	valueByoPhoneNumber := new(ByoPhoneNumber)
	if err := json.Unmarshal(data, &valueByoPhoneNumber); err == nil {
		p.ByoPhoneNumber = valueByoPhoneNumber
		return nil
	}
	valueTwilioPhoneNumber := new(TwilioPhoneNumber)
	if err := json.Unmarshal(data, &valueTwilioPhoneNumber); err == nil {
		p.TwilioPhoneNumber = valueTwilioPhoneNumber
		return nil
	}
	valueVonagePhoneNumber := new(VonagePhoneNumber)
	if err := json.Unmarshal(data, &valueVonagePhoneNumber); err == nil {
		p.VonagePhoneNumber = valueVonagePhoneNumber
		return nil
	}
	valueVapiPhoneNumber := new(VapiPhoneNumber)
	if err := json.Unmarshal(data, &valueVapiPhoneNumber); err == nil {
		p.VapiPhoneNumber = valueVapiPhoneNumber
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, p)
}

func (p PhoneNumbersCreateResponse) MarshalJSON() ([]byte, error) {
	if p.ByoPhoneNumber != nil {
		return json.Marshal(p.ByoPhoneNumber)
	}
	if p.TwilioPhoneNumber != nil {
		return json.Marshal(p.TwilioPhoneNumber)
	}
	if p.VonagePhoneNumber != nil {
		return json.Marshal(p.VonagePhoneNumber)
	}
	if p.VapiPhoneNumber != nil {
		return json.Marshal(p.VapiPhoneNumber)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", p)
}

type PhoneNumbersCreateResponseVisitor interface {
	VisitByoPhoneNumber(*ByoPhoneNumber) error
	VisitTwilioPhoneNumber(*TwilioPhoneNumber) error
	VisitVonagePhoneNumber(*VonagePhoneNumber) error
	VisitVapiPhoneNumber(*VapiPhoneNumber) error
}

func (p *PhoneNumbersCreateResponse) Accept(visitor PhoneNumbersCreateResponseVisitor) error {
	if p.ByoPhoneNumber != nil {
		return visitor.VisitByoPhoneNumber(p.ByoPhoneNumber)
	}
	if p.TwilioPhoneNumber != nil {
		return visitor.VisitTwilioPhoneNumber(p.TwilioPhoneNumber)
	}
	if p.VonagePhoneNumber != nil {
		return visitor.VisitVonagePhoneNumber(p.VonagePhoneNumber)
	}
	if p.VapiPhoneNumber != nil {
		return visitor.VisitVapiPhoneNumber(p.VapiPhoneNumber)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", p)
}

type PhoneNumbersDeleteResponse struct {
	ByoPhoneNumber    *ByoPhoneNumber
	TwilioPhoneNumber *TwilioPhoneNumber
	VonagePhoneNumber *VonagePhoneNumber
	VapiPhoneNumber   *VapiPhoneNumber
}

func (p *PhoneNumbersDeleteResponse) UnmarshalJSON(data []byte) error {
	valueByoPhoneNumber := new(ByoPhoneNumber)
	if err := json.Unmarshal(data, &valueByoPhoneNumber); err == nil {
		p.ByoPhoneNumber = valueByoPhoneNumber
		return nil
	}
	valueTwilioPhoneNumber := new(TwilioPhoneNumber)
	if err := json.Unmarshal(data, &valueTwilioPhoneNumber); err == nil {
		p.TwilioPhoneNumber = valueTwilioPhoneNumber
		return nil
	}
	valueVonagePhoneNumber := new(VonagePhoneNumber)
	if err := json.Unmarshal(data, &valueVonagePhoneNumber); err == nil {
		p.VonagePhoneNumber = valueVonagePhoneNumber
		return nil
	}
	valueVapiPhoneNumber := new(VapiPhoneNumber)
	if err := json.Unmarshal(data, &valueVapiPhoneNumber); err == nil {
		p.VapiPhoneNumber = valueVapiPhoneNumber
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, p)
}

func (p PhoneNumbersDeleteResponse) MarshalJSON() ([]byte, error) {
	if p.ByoPhoneNumber != nil {
		return json.Marshal(p.ByoPhoneNumber)
	}
	if p.TwilioPhoneNumber != nil {
		return json.Marshal(p.TwilioPhoneNumber)
	}
	if p.VonagePhoneNumber != nil {
		return json.Marshal(p.VonagePhoneNumber)
	}
	if p.VapiPhoneNumber != nil {
		return json.Marshal(p.VapiPhoneNumber)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", p)
}

type PhoneNumbersDeleteResponseVisitor interface {
	VisitByoPhoneNumber(*ByoPhoneNumber) error
	VisitTwilioPhoneNumber(*TwilioPhoneNumber) error
	VisitVonagePhoneNumber(*VonagePhoneNumber) error
	VisitVapiPhoneNumber(*VapiPhoneNumber) error
}

func (p *PhoneNumbersDeleteResponse) Accept(visitor PhoneNumbersDeleteResponseVisitor) error {
	if p.ByoPhoneNumber != nil {
		return visitor.VisitByoPhoneNumber(p.ByoPhoneNumber)
	}
	if p.TwilioPhoneNumber != nil {
		return visitor.VisitTwilioPhoneNumber(p.TwilioPhoneNumber)
	}
	if p.VonagePhoneNumber != nil {
		return visitor.VisitVonagePhoneNumber(p.VonagePhoneNumber)
	}
	if p.VapiPhoneNumber != nil {
		return visitor.VisitVapiPhoneNumber(p.VapiPhoneNumber)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", p)
}

type PhoneNumbersGetResponse struct {
	ByoPhoneNumber    *ByoPhoneNumber
	TwilioPhoneNumber *TwilioPhoneNumber
	VonagePhoneNumber *VonagePhoneNumber
	VapiPhoneNumber   *VapiPhoneNumber
}

func (p *PhoneNumbersGetResponse) UnmarshalJSON(data []byte) error {
	valueByoPhoneNumber := new(ByoPhoneNumber)
	if err := json.Unmarshal(data, &valueByoPhoneNumber); err == nil {
		p.ByoPhoneNumber = valueByoPhoneNumber
		return nil
	}
	valueTwilioPhoneNumber := new(TwilioPhoneNumber)
	if err := json.Unmarshal(data, &valueTwilioPhoneNumber); err == nil {
		p.TwilioPhoneNumber = valueTwilioPhoneNumber
		return nil
	}
	valueVonagePhoneNumber := new(VonagePhoneNumber)
	if err := json.Unmarshal(data, &valueVonagePhoneNumber); err == nil {
		p.VonagePhoneNumber = valueVonagePhoneNumber
		return nil
	}
	valueVapiPhoneNumber := new(VapiPhoneNumber)
	if err := json.Unmarshal(data, &valueVapiPhoneNumber); err == nil {
		p.VapiPhoneNumber = valueVapiPhoneNumber
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, p)
}

func (p PhoneNumbersGetResponse) MarshalJSON() ([]byte, error) {
	if p.ByoPhoneNumber != nil {
		return json.Marshal(p.ByoPhoneNumber)
	}
	if p.TwilioPhoneNumber != nil {
		return json.Marshal(p.TwilioPhoneNumber)
	}
	if p.VonagePhoneNumber != nil {
		return json.Marshal(p.VonagePhoneNumber)
	}
	if p.VapiPhoneNumber != nil {
		return json.Marshal(p.VapiPhoneNumber)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", p)
}

type PhoneNumbersGetResponseVisitor interface {
	VisitByoPhoneNumber(*ByoPhoneNumber) error
	VisitTwilioPhoneNumber(*TwilioPhoneNumber) error
	VisitVonagePhoneNumber(*VonagePhoneNumber) error
	VisitVapiPhoneNumber(*VapiPhoneNumber) error
}

func (p *PhoneNumbersGetResponse) Accept(visitor PhoneNumbersGetResponseVisitor) error {
	if p.ByoPhoneNumber != nil {
		return visitor.VisitByoPhoneNumber(p.ByoPhoneNumber)
	}
	if p.TwilioPhoneNumber != nil {
		return visitor.VisitTwilioPhoneNumber(p.TwilioPhoneNumber)
	}
	if p.VonagePhoneNumber != nil {
		return visitor.VisitVonagePhoneNumber(p.VonagePhoneNumber)
	}
	if p.VapiPhoneNumber != nil {
		return visitor.VisitVapiPhoneNumber(p.VapiPhoneNumber)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", p)
}

type PhoneNumbersListResponseItem struct {
	ByoPhoneNumber    *ByoPhoneNumber
	TwilioPhoneNumber *TwilioPhoneNumber
	VonagePhoneNumber *VonagePhoneNumber
	VapiPhoneNumber   *VapiPhoneNumber
}

func (p *PhoneNumbersListResponseItem) UnmarshalJSON(data []byte) error {
	valueByoPhoneNumber := new(ByoPhoneNumber)
	if err := json.Unmarshal(data, &valueByoPhoneNumber); err == nil {
		p.ByoPhoneNumber = valueByoPhoneNumber
		return nil
	}
	valueTwilioPhoneNumber := new(TwilioPhoneNumber)
	if err := json.Unmarshal(data, &valueTwilioPhoneNumber); err == nil {
		p.TwilioPhoneNumber = valueTwilioPhoneNumber
		return nil
	}
	valueVonagePhoneNumber := new(VonagePhoneNumber)
	if err := json.Unmarshal(data, &valueVonagePhoneNumber); err == nil {
		p.VonagePhoneNumber = valueVonagePhoneNumber
		return nil
	}
	valueVapiPhoneNumber := new(VapiPhoneNumber)
	if err := json.Unmarshal(data, &valueVapiPhoneNumber); err == nil {
		p.VapiPhoneNumber = valueVapiPhoneNumber
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, p)
}

func (p PhoneNumbersListResponseItem) MarshalJSON() ([]byte, error) {
	if p.ByoPhoneNumber != nil {
		return json.Marshal(p.ByoPhoneNumber)
	}
	if p.TwilioPhoneNumber != nil {
		return json.Marshal(p.TwilioPhoneNumber)
	}
	if p.VonagePhoneNumber != nil {
		return json.Marshal(p.VonagePhoneNumber)
	}
	if p.VapiPhoneNumber != nil {
		return json.Marshal(p.VapiPhoneNumber)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", p)
}

type PhoneNumbersListResponseItemVisitor interface {
	VisitByoPhoneNumber(*ByoPhoneNumber) error
	VisitTwilioPhoneNumber(*TwilioPhoneNumber) error
	VisitVonagePhoneNumber(*VonagePhoneNumber) error
	VisitVapiPhoneNumber(*VapiPhoneNumber) error
}

func (p *PhoneNumbersListResponseItem) Accept(visitor PhoneNumbersListResponseItemVisitor) error {
	if p.ByoPhoneNumber != nil {
		return visitor.VisitByoPhoneNumber(p.ByoPhoneNumber)
	}
	if p.TwilioPhoneNumber != nil {
		return visitor.VisitTwilioPhoneNumber(p.TwilioPhoneNumber)
	}
	if p.VonagePhoneNumber != nil {
		return visitor.VisitVonagePhoneNumber(p.VonagePhoneNumber)
	}
	if p.VapiPhoneNumber != nil {
		return visitor.VisitVapiPhoneNumber(p.VapiPhoneNumber)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", p)
}

type PhoneNumbersUpdateResponse struct {
	ByoPhoneNumber    *ByoPhoneNumber
	TwilioPhoneNumber *TwilioPhoneNumber
	VonagePhoneNumber *VonagePhoneNumber
	VapiPhoneNumber   *VapiPhoneNumber
}

func (p *PhoneNumbersUpdateResponse) UnmarshalJSON(data []byte) error {
	valueByoPhoneNumber := new(ByoPhoneNumber)
	if err := json.Unmarshal(data, &valueByoPhoneNumber); err == nil {
		p.ByoPhoneNumber = valueByoPhoneNumber
		return nil
	}
	valueTwilioPhoneNumber := new(TwilioPhoneNumber)
	if err := json.Unmarshal(data, &valueTwilioPhoneNumber); err == nil {
		p.TwilioPhoneNumber = valueTwilioPhoneNumber
		return nil
	}
	valueVonagePhoneNumber := new(VonagePhoneNumber)
	if err := json.Unmarshal(data, &valueVonagePhoneNumber); err == nil {
		p.VonagePhoneNumber = valueVonagePhoneNumber
		return nil
	}
	valueVapiPhoneNumber := new(VapiPhoneNumber)
	if err := json.Unmarshal(data, &valueVapiPhoneNumber); err == nil {
		p.VapiPhoneNumber = valueVapiPhoneNumber
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, p)
}

func (p PhoneNumbersUpdateResponse) MarshalJSON() ([]byte, error) {
	if p.ByoPhoneNumber != nil {
		return json.Marshal(p.ByoPhoneNumber)
	}
	if p.TwilioPhoneNumber != nil {
		return json.Marshal(p.TwilioPhoneNumber)
	}
	if p.VonagePhoneNumber != nil {
		return json.Marshal(p.VonagePhoneNumber)
	}
	if p.VapiPhoneNumber != nil {
		return json.Marshal(p.VapiPhoneNumber)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", p)
}

type PhoneNumbersUpdateResponseVisitor interface {
	VisitByoPhoneNumber(*ByoPhoneNumber) error
	VisitTwilioPhoneNumber(*TwilioPhoneNumber) error
	VisitVonagePhoneNumber(*VonagePhoneNumber) error
	VisitVapiPhoneNumber(*VapiPhoneNumber) error
}

func (p *PhoneNumbersUpdateResponse) Accept(visitor PhoneNumbersUpdateResponseVisitor) error {
	if p.ByoPhoneNumber != nil {
		return visitor.VisitByoPhoneNumber(p.ByoPhoneNumber)
	}
	if p.TwilioPhoneNumber != nil {
		return visitor.VisitTwilioPhoneNumber(p.TwilioPhoneNumber)
	}
	if p.VonagePhoneNumber != nil {
		return visitor.VisitVonagePhoneNumber(p.VonagePhoneNumber)
	}
	if p.VapiPhoneNumber != nil {
		return visitor.VisitVapiPhoneNumber(p.VapiPhoneNumber)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", p)
}

// This is the fallback destination an inbound call will be transferred to if:
//
// 1. `assistantId` is not set
// 2. `squadId` is not set
// 3. and, `assistant-request` message to the `serverUrl` fails
//
// If this is not set and above conditions are met, the inbound call is hung up with an error message.
type UpdatePhoneNumberDtoFallbackDestination struct {
	TransferDestinationNumber *TransferDestinationNumber
	TransferDestinationSip    *TransferDestinationSip
}

func (u *UpdatePhoneNumberDtoFallbackDestination) UnmarshalJSON(data []byte) error {
	valueTransferDestinationNumber := new(TransferDestinationNumber)
	if err := json.Unmarshal(data, &valueTransferDestinationNumber); err == nil {
		u.TransferDestinationNumber = valueTransferDestinationNumber
		return nil
	}
	valueTransferDestinationSip := new(TransferDestinationSip)
	if err := json.Unmarshal(data, &valueTransferDestinationSip); err == nil {
		u.TransferDestinationSip = valueTransferDestinationSip
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, u)
}

func (u UpdatePhoneNumberDtoFallbackDestination) MarshalJSON() ([]byte, error) {
	if u.TransferDestinationNumber != nil {
		return json.Marshal(u.TransferDestinationNumber)
	}
	if u.TransferDestinationSip != nil {
		return json.Marshal(u.TransferDestinationSip)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", u)
}

type UpdatePhoneNumberDtoFallbackDestinationVisitor interface {
	VisitTransferDestinationNumber(*TransferDestinationNumber) error
	VisitTransferDestinationSip(*TransferDestinationSip) error
}

func (u *UpdatePhoneNumberDtoFallbackDestination) Accept(visitor UpdatePhoneNumberDtoFallbackDestinationVisitor) error {
	if u.TransferDestinationNumber != nil {
		return visitor.VisitTransferDestinationNumber(u.TransferDestinationNumber)
	}
	if u.TransferDestinationSip != nil {
		return visitor.VisitTransferDestinationSip(u.TransferDestinationSip)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", u)
}

type UpdatePhoneNumberDto struct {
	// This is the fallback destination an inbound call will be transferred to if:
	// 1. `assistantId` is not set
	// 2. `squadId` is not set
	// 3. and, `assistant-request` message to the `serverUrl` fails
	//
	// If this is not set and above conditions are met, the inbound call is hung up with an error message.
	FallbackDestination *UpdatePhoneNumberDtoFallbackDestination `json:"fallbackDestination,omitempty" url:"-"`
	// This is the name of the phone number. This is just for your own reference.
	Name *string `json:"name,omitempty" url:"-"`
	// This is the assistant that will be used for incoming calls to this phone number.
	//
	// If neither `assistantId` nor `squadId` is set, `assistant-request` will be sent to your Server URL. Check `ServerMessage` and `ServerMessageResponse` for the shape of the message and response that is expected.
	AssistantId *string `json:"assistantId,omitempty" url:"-"`
	// This is the squad that will be used for incoming calls to this phone number.
	//
	// If neither `assistantId` nor `squadId` is set, `assistant-request` will be sent to your Server URL. Check `ServerMessage` and `ServerMessageResponse` for the shape of the message and response that is expected.
	SquadId *string `json:"squadId,omitempty" url:"-"`
	// This is the server URL where messages will be sent for calls on this number. This includes the `assistant-request` message.
	//
	// You can see the shape of the messages sent in `ServerMessage`.
	//
	// This overrides the `org.serverUrl`. Order of precedence: tool.server.url > assistant.serverUrl > phoneNumber.serverUrl > org.serverUrl.
	ServerUrl *string `json:"serverUrl,omitempty" url:"-"`
	// This is the secret Vapi will send with every message to your server. It's sent as a header called x-vapi-secret.
	//
	// Same precedence logic as serverUrl.
	ServerUrlSecret *string `json:"serverUrlSecret,omitempty" url:"-"`
}
