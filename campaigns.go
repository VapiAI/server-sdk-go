// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/VapiAI/server-sdk-go/internal"
	time "time"
)

type CreateCampaignDto struct {
	// This is the name of the campaign. This is just for your own reference.
	Name string `json:"name" url:"-"`
	// This is the assistant ID that will be used for the campaign calls. Note: Either assistantId or workflowId can be used, but not both.
	AssistantId *string `json:"assistantId,omitempty" url:"-"`
	// This is the workflow ID that will be used for the campaign calls. Note: Either assistantId or workflowId can be used, but not both.
	WorkflowId *string `json:"workflowId,omitempty" url:"-"`
	// This is the phone number ID that will be used for the campaign calls.
	PhoneNumberId string `json:"phoneNumberId" url:"-"`
	// This is the schedule plan for the campaign.
	SchedulePlan *SchedulePlan `json:"schedulePlan,omitempty" url:"-"`
	// These are the customers that will be called in the campaign.
	Customers []*CreateCustomerDto `json:"customers,omitempty" url:"-"`
}

type CampaignControllerFindAllRequest struct {
	// This is the maximum number of items to return. Defaults to 100.
	Limit *float64 `json:"-" url:"limit,omitempty"`
	// This will return items where the createdAt is greater than the specified value.
	CreatedAtGt *time.Time `json:"-" url:"createdAtGt,omitempty"`
	// This will return items where the createdAt is less than the specified value.
	CreatedAtLt *time.Time `json:"-" url:"createdAtLt,omitempty"`
	// This will return items where the createdAt is greater than or equal to the specified value.
	CreatedAtGe *time.Time `json:"-" url:"createdAtGe,omitempty"`
	// This will return items where the createdAt is less than or equal to the specified value.
	CreatedAtLe *time.Time `json:"-" url:"createdAtLe,omitempty"`
	// This will return items where the updatedAt is greater than the specified value.
	UpdatedAtGt *time.Time `json:"-" url:"updatedAtGt,omitempty"`
	// This will return items where the updatedAt is less than the specified value.
	UpdatedAtLt *time.Time `json:"-" url:"updatedAtLt,omitempty"`
	// This will return items where the updatedAt is greater than or equal to the specified value.
	UpdatedAtGe *time.Time `json:"-" url:"updatedAtGe,omitempty"`
	// This will return items where the updatedAt is less than or equal to the specified value.
	UpdatedAtLe *time.Time `json:"-" url:"updatedAtLe,omitempty"`
}

type CampaignControllerFindAllPaginatedRequest struct {
	Id     *string                                          `json:"-" url:"id,omitempty"`
	Status *CampaignControllerFindAllPaginatedRequestStatus `json:"-" url:"status,omitempty"`
	// This is the page number to return. Defaults to 1.
	Page *float64 `json:"-" url:"page,omitempty"`
	// This is the sort order for pagination. Defaults to 'DESC'.
	SortOrder *CampaignControllerFindAllPaginatedRequestSortOrder `json:"-" url:"sortOrder,omitempty"`
	// This is the maximum number of items to return. Defaults to 100.
	Limit *float64 `json:"-" url:"limit,omitempty"`
	// This will return items where the createdAt is greater than the specified value.
	CreatedAtGt *time.Time `json:"-" url:"createdAtGt,omitempty"`
	// This will return items where the createdAt is less than the specified value.
	CreatedAtLt *time.Time `json:"-" url:"createdAtLt,omitempty"`
	// This will return items where the createdAt is greater than or equal to the specified value.
	CreatedAtGe *time.Time `json:"-" url:"createdAtGe,omitempty"`
	// This will return items where the createdAt is less than or equal to the specified value.
	CreatedAtLe *time.Time `json:"-" url:"createdAtLe,omitempty"`
	// This will return items where the updatedAt is greater than the specified value.
	UpdatedAtGt *time.Time `json:"-" url:"updatedAtGt,omitempty"`
	// This will return items where the updatedAt is less than the specified value.
	UpdatedAtLt *time.Time `json:"-" url:"updatedAtLt,omitempty"`
	// This will return items where the updatedAt is greater than or equal to the specified value.
	UpdatedAtGe *time.Time `json:"-" url:"updatedAtGe,omitempty"`
	// This will return items where the updatedAt is less than or equal to the specified value.
	UpdatedAtLe *time.Time `json:"-" url:"updatedAtLe,omitempty"`
}

type UpdateCampaignDto struct {
	// This is the name of the campaign. This is just for your own reference.
	Name *string `json:"name,omitempty" url:"-"`
	// This is the assistant ID that will be used for the campaign calls.
	// Can only be updated if campaign is not in progress or has ended.
	AssistantId *string `json:"assistantId,omitempty" url:"-"`
	// This is the workflow ID that will be used for the campaign calls.
	// Can only be updated if campaign is not in progress or has ended.
	WorkflowId *string `json:"workflowId,omitempty" url:"-"`
	// This is the phone number ID that will be used for the campaign calls.
	// Can only be updated if campaign is not in progress or has ended.
	PhoneNumberId *string `json:"phoneNumberId,omitempty" url:"-"`
	// This is the schedule plan for the campaign.
	// Can only be updated if campaign is not in progress or has ended.
	SchedulePlan *SchedulePlan `json:"schedulePlan,omitempty" url:"-"`
	// This is the status of the campaign.
	// Can only be updated to 'ended' if you want to end the campaign.
	// When set to 'ended', it will delete all scheduled calls. Calls in progress will be allowed to complete.
	Status *string `json:"status,omitempty" url:"-"`
}

type Campaign struct {
	// This is the status of the campaign.
	Status CampaignStatus `json:"status" url:"status"`
	// This is the explanation for how the campaign ended.
	EndedReason *CampaignEndedReason `json:"endedReason,omitempty" url:"endedReason,omitempty"`
	// This is the name of the campaign. This is just for your own reference.
	Name string `json:"name" url:"name"`
	// This is the assistant ID that will be used for the campaign calls. Note: Either assistantId or workflowId can be used, but not both.
	AssistantId *string `json:"assistantId,omitempty" url:"assistantId,omitempty"`
	// This is the workflow ID that will be used for the campaign calls. Note: Either assistantId or workflowId can be used, but not both.
	WorkflowId *string `json:"workflowId,omitempty" url:"workflowId,omitempty"`
	// This is the phone number ID that will be used for the campaign calls.
	PhoneNumberId string `json:"phoneNumberId" url:"phoneNumberId"`
	// This is the schedule plan for the campaign.
	SchedulePlan *SchedulePlan `json:"schedulePlan,omitempty" url:"schedulePlan,omitempty"`
	// These are the customers that will be called in the campaign.
	Customers []*CreateCustomerDto `json:"customers,omitempty" url:"customers,omitempty"`
	// This is the unique identifier for the campaign.
	Id string `json:"id" url:"id"`
	// This is the unique identifier for the org that this campaign belongs to.
	OrgId string `json:"orgId" url:"orgId"`
	// This is the ISO 8601 date-time string of when the campaign was created.
	CreatedAt time.Time `json:"createdAt" url:"createdAt"`
	// This is the ISO 8601 date-time string of when the campaign was last updated.
	UpdatedAt time.Time `json:"updatedAt" url:"updatedAt"`
	// This is a map of call IDs to campaign call details.
	Calls map[string]interface{} `json:"calls,omitempty" url:"calls,omitempty"`
	// This is the number of calls that have ended.
	CallsCounterEnded float64 `json:"callsCounterEnded" url:"callsCounterEnded"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *Campaign) GetStatus() CampaignStatus {
	if c == nil {
		return ""
	}
	return c.Status
}

func (c *Campaign) GetEndedReason() *CampaignEndedReason {
	if c == nil {
		return nil
	}
	return c.EndedReason
}

func (c *Campaign) GetName() string {
	if c == nil {
		return ""
	}
	return c.Name
}

func (c *Campaign) GetAssistantId() *string {
	if c == nil {
		return nil
	}
	return c.AssistantId
}

func (c *Campaign) GetWorkflowId() *string {
	if c == nil {
		return nil
	}
	return c.WorkflowId
}

func (c *Campaign) GetPhoneNumberId() string {
	if c == nil {
		return ""
	}
	return c.PhoneNumberId
}

func (c *Campaign) GetSchedulePlan() *SchedulePlan {
	if c == nil {
		return nil
	}
	return c.SchedulePlan
}

func (c *Campaign) GetCustomers() []*CreateCustomerDto {
	if c == nil {
		return nil
	}
	return c.Customers
}

func (c *Campaign) GetId() string {
	if c == nil {
		return ""
	}
	return c.Id
}

func (c *Campaign) GetOrgId() string {
	if c == nil {
		return ""
	}
	return c.OrgId
}

func (c *Campaign) GetCreatedAt() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.CreatedAt
}

func (c *Campaign) GetUpdatedAt() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.UpdatedAt
}

func (c *Campaign) GetCalls() map[string]interface{} {
	if c == nil {
		return nil
	}
	return c.Calls
}

func (c *Campaign) GetCallsCounterEnded() float64 {
	if c == nil {
		return 0
	}
	return c.CallsCounterEnded
}

func (c *Campaign) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *Campaign) UnmarshalJSON(data []byte) error {
	type embed Campaign
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"createdAt"`
		UpdatedAt *internal.DateTime `json:"updatedAt"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = Campaign(unmarshaler.embed)
	c.CreatedAt = unmarshaler.CreatedAt.Time()
	c.UpdatedAt = unmarshaler.UpdatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *Campaign) MarshalJSON() ([]byte, error) {
	type embed Campaign
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"createdAt"`
		UpdatedAt *internal.DateTime `json:"updatedAt"`
	}{
		embed:     embed(*c),
		CreatedAt: internal.NewDateTime(c.CreatedAt),
		UpdatedAt: internal.NewDateTime(c.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (c *Campaign) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// This is the explanation for how the campaign ended.
type CampaignEndedReason string

const (
	CampaignEndedReasonCampaignScheduledEndedByUser  CampaignEndedReason = "campaign.scheduled.ended-by-user"
	CampaignEndedReasonCampaignInProgressEndedByUser CampaignEndedReason = "campaign.in-progress.ended-by-user"
	CampaignEndedReasonCampaignEndedSuccess          CampaignEndedReason = "campaign.ended.success"
)

func NewCampaignEndedReasonFromString(s string) (CampaignEndedReason, error) {
	switch s {
	case "campaign.scheduled.ended-by-user":
		return CampaignEndedReasonCampaignScheduledEndedByUser, nil
	case "campaign.in-progress.ended-by-user":
		return CampaignEndedReasonCampaignInProgressEndedByUser, nil
	case "campaign.ended.success":
		return CampaignEndedReasonCampaignEndedSuccess, nil
	}
	var t CampaignEndedReason
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CampaignEndedReason) Ptr() *CampaignEndedReason {
	return &c
}

// This is the status of the campaign.
type CampaignStatus string

const (
	CampaignStatusScheduled  CampaignStatus = "scheduled"
	CampaignStatusInProgress CampaignStatus = "in-progress"
	CampaignStatusEnded      CampaignStatus = "ended"
)

func NewCampaignStatusFromString(s string) (CampaignStatus, error) {
	switch s {
	case "scheduled":
		return CampaignStatusScheduled, nil
	case "in-progress":
		return CampaignStatusInProgress, nil
	case "ended":
		return CampaignStatusEnded, nil
	}
	var t CampaignStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CampaignStatus) Ptr() *CampaignStatus {
	return &c
}

type CampaignControllerFindAllPaginatedRequestSortOrder string

const (
	CampaignControllerFindAllPaginatedRequestSortOrderAsc  CampaignControllerFindAllPaginatedRequestSortOrder = "ASC"
	CampaignControllerFindAllPaginatedRequestSortOrderDesc CampaignControllerFindAllPaginatedRequestSortOrder = "DESC"
)

func NewCampaignControllerFindAllPaginatedRequestSortOrderFromString(s string) (CampaignControllerFindAllPaginatedRequestSortOrder, error) {
	switch s {
	case "ASC":
		return CampaignControllerFindAllPaginatedRequestSortOrderAsc, nil
	case "DESC":
		return CampaignControllerFindAllPaginatedRequestSortOrderDesc, nil
	}
	var t CampaignControllerFindAllPaginatedRequestSortOrder
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CampaignControllerFindAllPaginatedRequestSortOrder) Ptr() *CampaignControllerFindAllPaginatedRequestSortOrder {
	return &c
}

type CampaignControllerFindAllPaginatedRequestStatus string

const (
	CampaignControllerFindAllPaginatedRequestStatusScheduled  CampaignControllerFindAllPaginatedRequestStatus = "scheduled"
	CampaignControllerFindAllPaginatedRequestStatusInProgress CampaignControllerFindAllPaginatedRequestStatus = "in-progress"
	CampaignControllerFindAllPaginatedRequestStatusEnded      CampaignControllerFindAllPaginatedRequestStatus = "ended"
)

func NewCampaignControllerFindAllPaginatedRequestStatusFromString(s string) (CampaignControllerFindAllPaginatedRequestStatus, error) {
	switch s {
	case "scheduled":
		return CampaignControllerFindAllPaginatedRequestStatusScheduled, nil
	case "in-progress":
		return CampaignControllerFindAllPaginatedRequestStatusInProgress, nil
	case "ended":
		return CampaignControllerFindAllPaginatedRequestStatusEnded, nil
	}
	var t CampaignControllerFindAllPaginatedRequestStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CampaignControllerFindAllPaginatedRequestStatus) Ptr() *CampaignControllerFindAllPaginatedRequestStatus {
	return &c
}
